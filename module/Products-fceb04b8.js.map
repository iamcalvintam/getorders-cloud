{"version":3,"file":"Products-fceb04b8.js","sources":["../../src/TagView.html","../../src/ModifierView.html","../../src/ProductView.html","../../src/Products.html"],"sourcesContent":["<script>\n    import { onMount } from 'svelte';\n    import Toolbar from './UI/UIToolbar.html'\n    import ModalView from './UI/UIModalView.html'\n    import TextField from './UI/UITextField.html'\n    import Loading from './UI/UILoading.html'\n    import UIItem from './UI/UIItem.html'\n    import { session, api, alert, accounts, modal, apply, customers, pop_modal } from './CTStore.js';\n    export let tags = [], selected_tags = [];\n    let field_style = { container: 'w-full' }\n    let style = { body: 'screen-height-xs', content: 'overflow-y-scroll scrolling-touch' }\n    let tools = [{ name: \"Close\", icon: \"close-circle\", function: \"pop_modal\" },\n    { name: \"Save\", icon: \"checkmark-circle\", function: \"save\" }]\n    let tool_style = { container: \"justify-end\" }\n    function selected(e) {\n        if (e.detail.function == 'pop_modal') {\n            pop_modal()\n        }\n        if (e.detail.function == 'save') {\n            $apply = { selected_tags };\n            pop_modal()\n        }\n    }\n    function contains(tag) {\n        return selected_tags.find(t => t._id == tag._id)\n    }\n    function toggle(tag) {\n        let len = selected_tags.length\n        selected_tags = selected_tags.filter(t => t._id != tag._id)\n        if (selected_tags.length == len) {\n            //Add\n            selected_tags = [...selected_tags, tag]\n        }\n        tags = tags;\n    }\n    function add() {\n        selected_tags = [...selected_tags, { name: \"\", new: true }]\n    }\n</script>\n<ModalView style=\"{style}\">\n    <div slot=\"title\" class=\"font-semibold text-xl text-gray-600 pb-3\">\n        Tags\n    </div>\n    <div slot=\"content\" class=\"p-2\">\n        <UIItem>\n            <div class=\"flex w-full p-3\" on:click=\"{add}\">\n                <i class=\"pr-3 self-center fas fa-plus\"></i>\n                Add New Tag\n            </div>\n        </UIItem>\n        {#each selected_tags as tag}\n            {#if tag.new}\n            <UIItem>\n                <div class=\"flex w-full m-3\">\n                    <span class=\"rounded-lg p-1 mr-3 self-center bg-theme text-xs text-white\">NEW</span>\n                    <TextField style=\"{field_style}\" label=\"Name\" placeholder=\"Enter a name for this tag\" bind:value=\"{tag.name}\" />\n                </div>\n            </UIItem>\n            {/if}\n        {/each}\n        {#each tags as tag}\n            <UIItem>\n              <div class=\"flex w-full m-3\" on:click=\"{ () => { toggle(tag) } }\">\n                <i class=\"pr-3 self-center fas { contains(tag) ? 'fa-check-square' : 'fa-square' }\"></i>\n                {tag.name}\n              </div>\n            </UIItem>\n        {/each}\n    </div>\n    <div slot=\"toolbar\">\n        <Toolbar on:selected=\"{selected}\" tools=\"{tools}\" style=\"{tool_style}\" />\n    </div>\n</ModalView>","<script>\n    import { onMount, createEventDispatcher } from 'svelte';\n    import Toolbar from './UI/UIToolbar.html'\n    import Segmented from './UI/UISegmented.html'\n    import ModalView from './UI/UIModalView.html'\n    import TextField from './UI/UITextField.html'\n    import Loading from './UI/UILoading.html'\n    import UIItem from './UI/UIItem.html'\n    import { session, api, alert, accounts, modal, apply, customers, pop_modal, uuid } from './CTStore.js';\n    export let modifiers = [];\n    onMount(() => {\n    });\n    let field_style = { container: 'w-full mb-2' }, set_style = { container: 'flex-grow mb-2' }, amount_style = { container: 'w-1/2 mb-2' };\n    let style = { body: 'screen-height-xs', content: 'overflow-y-scroll scrolling-touch' }\n    let tools = [{ name: \"Close\", icon: \"close-circle\", function: \"pop_modal\" },\n    { name: \"Save\", icon: \"checkmark-circle\", function: \"save\" }]\n    let tool_style = { container: \"justify-end\" }\n    function selected(e) {\n        if (e.detail.function == 'pop_modal') {\n            pop_modal()\n        }\n        if (e.detail.function == 'save') {\n            $apply = { modifiers };\n            pop_modal()\n        }\n    }\n    function contains(tag) {\n        return selected_tags.find(t => t._id == tag._id)\n    }\n    function add() {\n        let def = {\n            \"_id\": uuid(),\n            \"new\": true,\n            \"name\": '',\n            \"min_apply_limit\": 1,\n            \"max_apply_limit\": 1,\n            \"hidden\": false,\n            \"modifiers\": []\n        };\n        modifiers = [...modifiers, { ...def }]\n    }\n    function addToSet(set) {\n        let def = {\n            \"name\": '',\n            \"mode\": 0,\n            \"amount\": 0,\n            \"pre_selected\": false,\n            \"sequence\": 0\n        }\n        set = { ...set, modifiers: [...set.modifiers, { ...def }] }\n        reloadSet(set)\n    }\n    function removeFromSet(set, index) {\n        console.log(set)\n        if (index > -1 && index < set.modifiers.length) {\n            console.log('splice')\n            set.modifiers.splice(index, 1);\n            console.log('spliced')\n            reloadSet(set)\n        }\n    }\n    function reloadSet(set, exclude) {\n        if (exclude) modifiers = modifiers.filter(s => s._id != set._id)\n        modifiers = modifiers.map(s => {\n            return (s._id == set._id) ? set : s;\n        })\n        console.log(modifiers)\n    }\n</script>\n<ModalView style=\"{style}\">\n    <div slot=\"title\" class=\"font-semibold text-xl text-gray-600 pb-3\">\n        Modifiers\n    </div>\n    <div slot=\"content\" class=\"p-2\">\n        <UIItem>\n            <div class=\"flex w-full p-3\" on:click=\"{add}\">\n                <i class=\"pr-3 self-center fas fa-plus\"></i>\n                Add New Modifier Set\n            </div>\n        </UIItem>\n        {#each modifiers as set}\n            <UIItem>\n                <div class=\"w-full m-3\">\n                    <div class=\"flex\">\n                        <TextField style=\"{set_style}\" label=\"Modifier Set Name\" placeholder=\"Enter a name for this set (E.g : Noodle Types)\"\n                        bind:value=\"{set.name}\" />\n                        <i class=\"icon ion-md-close w-8 h-8 text-center cursor-pointer\" on:click=\"{ () => reloadSet(set, true) }\"></i>\n                    </div>\n                    <div class=\"p-2\">\n                        <label class=\"block text-xs uppercase text-gray-600 font-semibold mb-2\">Modifiers</label>\n                        {#each set.modifiers as modifier, i}\n                        <div class=\"flex rounded-lg p-2 mb-2 border\">\n                            <div class=\"flex-grow\">\n                                <TextField style=\"{field_style}\" label=\"Modifier Name\" placeholder=\"Enter a name for this modifier (E.g : Kuey Teow)\"\n                                    bind:value=\"{modifier.name}\" />\n                                <Segmented style=\"{field_style}\" label=\"Type\"\n                                    segments=\"{[{ name : 'Instruction', value : 0}, { name : 'Top Up', value : 1}, { name : 'Deduct', value : 2}, { name : 'Discount', value : 3}]}\"\n                                    bind:value=\"{modifier.mode}\" />\n                                {#if modifier.mode>0}\n                                <TextField style=\"{amount_style}\" label=\"Amount\" placeholder=\"Amount\"\n                                    bind:value=\"{modifier.amount}\" prefix=\"{modifier.mode == 1 ? '+' : modifier.mode == 2 ? '-' : ''}\" suffix=\"{modifier.mode == 3 ? '%' : ''}\"/>\n                                {/if}\n                            </div>\n                            <i class=\"icon ion-md-close w-8 h-8 text-center cursor-pointer\" on:click=\"{ () => removeFromSet(set,i) }\"></i>\n                        </div>\n                        {/each}\n                        <div class=\"rounded-lg p-2 border border-dashed cursor-pointer\" on:click=\"{ () => { addToSet(set) }}\">\n                        <p class=\"text-gray-600\">\n                            <i class=\"pr-3 self-center fas fa-plus\"></i>\n                            Add New Modifier For This Set\n                        </p>\n                        </div>\n                    </div>\n                </div>\n            </UIItem>\n        {/each}\n    </div>\n    <div slot=\"toolbar\">\n        <Toolbar on:selected=\"{selected}\" tools=\"{tools}\" style=\"{tool_style}\" />\n    </div>\n</ModalView>","<script>\n  import { onMount, afterUpdate } from 'svelte'\n  import Toolbar from './UI/UIToolbar.html'\n  import TextField from './UI/UITextField.html'\n  import ModalView from './UI/UIModalView.html'\n  import TagView from './TagView.html'\n  import ModifierView from './ModifierView.html'\n  import Loading from './UI/UILoading.html'\n  import { session, api, alert, accounts, modal, apply, fetch, customers, pop_modal, s3 } from './CTStore.js';\n  let loading = false, tags, file;\n  export let product = {};\n  let style = { body: 'screen-height', content: 'overflow-y-scroll scrolling-touch' }\n  let tool_style = { container: \"justify-end\" }\n  let tools = [{ name: \"Close\", icon: \"close-circle\", function: \"pop_modal\" },\n  { name: \"Save\", icon: \"checkmark-circle\", function: \"save\" }]\n  onMount(() => {\n    fetch(api('/tags')).then(r => { tags = r });\n  });\n  function readFile() {\n    let reader = new FileReader();\n    reader.readAsDataURL(file.files[0]);\n    reader.onload = () => {\n      let file_content = reader.result;\n      product.file = file_content;\n    };\n  }\n  function selected(e) {\n    if (e.detail.function == 'pop_modal') {\n      pop_modal()\n    }\n    if (e.detail.function == 'save') {\n      loading = true;\n      fetch(api(`/products`), product).then(r => { $apply = { product: r }; pop_modal(); });\n    }\n  }\n  function edit_tags() {\n    if (tags) {\n      $modal = [...$modal, { selected_tags: product.tags, tags, view: TagView }]\n    }\n  }\n  function edit_mod() {\n    $modal = [...$modal, { product, modifiers: product.modifier_sets, view: ModifierView }]\n  }\n  apply.subscribe(cb => {\n    if (cb.selected_tags) {\n      product.tags = cb.selected_tags\n    }\n    if (cb.modifiers) {\n      product.modifier_sets = cb.modifiers\n    }\n    console.log(product)\n  })\n  let field_style = { container: 'w-1/2 mx-2' }\n</script>\n<ModalView style=\"{style}\">\n  <div slot=\"loader\">\n    {#if loading}\n  <Loading>\n    <div slot=\"message\">\n      One Moment Please..\n    </div>\n  </Loading>\n    {/if}\n  </div>\n  <div slot=\"title\" class=\"font-semibold text-xl text-gray-600 pb-3\">\n    { product._id ? 'Edit Product' : 'Create Product'}\n  </div>\n  <div slot=\"content\">\n    <div class=\"flex mb-2\">\n        <TextField style=\"{field_style}\" label=\"Name\" placeholder=\"Enter a product name\" bind:value=\"{product.name}\" />\n        <TextField style=\"{field_style}\" label=\"Unit Price\" placeholder=\"Enter a price (e.g : 10.00)\" bind:value=\"{product.unit_price}\" />\n    </div>\n    <div class=\"flex mb-2\">\n      <div class=\"w-1/2 mx-2\">\n        <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\">Tags</label>\n        <div class=\"border rounded shadow-sm p-2 w-full flex cursor-pointer { tags ? '' : 'opacity-25' }\" on:click=\"{edit_tags}\">\n          <div class=\"flex-grow\">\n              {#if product.tags.length > 0}\n                    {#each product.tags as tag}\n                    <span class=\"inline-block p-2 rounded-lg text-xs bg-theme text-white m-1\">{tag.name}</span>\n                    {/each}\n                    {:else}\n                    <p class=\"text-gray-500\">No tags selected. Product is hidden.</p>\n              {/if}\n          </div>\n          <i class=\"icon ion-md-expand text-gray-600 self-center\"></i>\n        </div>\n      </div>\n      <div class=\"w-1/2 mx-2\">\n        <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\">Modifiers</label>\n        <div class=\"border rounded shadow-sm p-2 w-full flex cursor-pointer\" on:click=\"{edit_mod}\">\n          <div class=\"flex-grow\">\n                    {#if product.modifier_sets.length > 0}\n                          {#each product.modifier_sets as mod}\n                          <span class=\"inline-block p-2 rounded-lg text-xs bg-theme text-white m-1\">{mod.name}</span>\n                          {/each}\n                          {:else}\n                          <p class=\"text-gray-500\">No modifiers selected.</p>\n                    {/if}\n                </div>\n                <i class=\"icon ion-md-expand text-gray-600 self-center\"></i>\n              </div>\n            </div>\n    </div>\n    <div class=\"flex mb-2\">\n      <div class=\"w-1/2 mx-2\">\n        <label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\">Product Image</label>\n        <label\n          class=\"p-2 block rounded cursor-pointer border shadow-sm { !product.file ? '' : 'bg-theme text-white'}\">\n          {#if !product.file}\n            <i class=\"icon ion-md-cloud-upload px-1\"></i>\n            <span class=\"mt-2 text-base leading-normal\">Upload Image</span>\n          {:else}\n            <i class=\"icon ion-md-cloud-done px-1\"></i>\n            <span class=\"mt-2 text-base leading-normal\">Image Selected</span>\n          {/if}\n            <input type=\"file\" class=\"hidden\" bind:this=\"{file}\" on:change=\"{readFile}\"/>\n        </label>\n        {#if product.media_urls && product.media_urls.length>0}\n        <div class=\"w-16 h-16 m-1 border bg-cover bg-center\" style=\"background-image:url({s3}{product.media_urls[0].original})\"></div>\n        {/if}\n      </div>\n      <div class=\"w-1/2 mx-2\"></div>\n    </div>\n  </div>\n    <div slot=\"toolbar\">\n    <Toolbar on:selected=\"{selected}\" tools=\"{tools}\" style=\"{tool_style}\" />\n  </div>\n</ModalView>","<script>\n    import { onMount } from 'svelte';\n    import Toolbar from './UI/UIToolbar.html';\n    import Loading from './UI/UILoading.html';\n    import UIItem from './UI/UIItem.html';\n    import ProductView from './ProductView.html';\n    import { session, api, alert, accounts, apply, modal, fetch } from './CTStore.js';\n    let products, loading = false;\n    let style = { container: \"border-b border-gray-300\" }\n    let tools = [{ name: \"Create\", icon: \"add\", function: \"add\" }]\n    let prod_default = {\n        name: \"\",\n        unit_price: 0,\n        tags: [],\n        modifier_sets: [],\n        variants: []\n    }\n    onMount(() => {\n        fetch(api('/products')).then(r => { products = r });\n    });\n    apply.subscribe(cb => {\n        if (cb.product) {\n            let prod = products.find(p => p._id == cb.product._id)\n            if (prod) {\n                products = products.map(p => p._id == cb.product._id ? cb.product : p)\n            } else {\n                products = [...products, cb.product]\n            }\n        }\n    });\n    function inspect(product) {\n        $modal = [...$modal, { product, view: ProductView }]\n    }\n    function selected(e) {\n        if (e.detail.function == 'add') {\n            $modal = [...$modal, { product: { ...prod_default }, view: ProductView }]\n        }\n    }\n    function toggle(product) {\n        loading = true;\n        let date = new Date();\n        product.deletedAt = product.deletedAt ? null : date;\n        fetch(api(`/products`)).then(r => { loading = false; $apply = { product: r } });\n    }\n</script>\n<Toolbar style=\"{style}\" on:selected=\"{selected}\" tools=\"{tools}\" />\n{#if !products || loading}\n  <Loading>\n    <div slot=\"message\">\n      One Moment Please..\n    </div>\n  </Loading>\n{:else}\n<div class=\"flex p-3 text-gray-400 font-semibold uppercase text-xs\">\n    <div class=\"w-1/3\">Product Name</div>\n    <div class=\"flex-none w-20\">Price</div>\n</div>\n{#each products as product}\n<UIItem>\n  <div class=\"flex w-full p-3 { product.deletedAt ? 'text-gray-500' : '' }\" on:click=\"{ () => { inspect(product) } }\">\n    <div class=\"flex-grow\">\n       <i class=\"pr-3 fas { product.deletedAt ? 'fa-eye-slash' : 'fa-eye' }\" on:click=\"{ () => toggle(product) }\"></i> {product.name}\n    </div>\n    <div class=\"flex-none w-20 text-right\">\n        {parseFloat(product.unit_price).toFixed(2)}\n    </div>\n  </div>\n</UIItem>\n{/each}\n{/if}"],"names":["ctx","name","new","length","tags","selected_tags","toggle","tag","len","filter","t","_id","container","body","content","icon","function","e","detail","pop_modal","$apply","find","mode","amount","value","modifiers","onMount","addToSet","set","reloadSet","pre_selected","sequence","removeFromSet","index","console","log","splice","exclude","s","map","def","uuid","min_apply_limit","max_apply_limit","hidden","modifier","i","modifier_sets","s3","media_urls","original","unit_price","file","loading","product","fetch","api","then","r","apply","subscribe","cb","reader","FileReader","readAsDataURL","files","onload","file_content","result","$modal","view","TagView","ModifierView","parseFloat","toFixed","deletedAt","products","prod_default","variants","inspect","ProductView","date","Date","prod","p"],"mappings":"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"}